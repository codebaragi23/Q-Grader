CMAKE_MINIMUM_REQUIRED(VERSION 3.2)
PROJECT(Q-GRADER)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

IF((IOS AND CMAKE_OSX_ARCHITECTURES MATCHES "arm")
  OR (APPLE AND CMAKE_OSX_ARCHITECTURES MATCHES "arm64")
  OR (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm|aarch64)"))
  SET(TARGET_ARCH aarch64)
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^(mips)")
  SET(TARGET_ARCH mips)
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^(riscv)")
  SET(TARGET_ARCH riscv)
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc)")
  SET(TARGET_ARCH powerpc)
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(X86_64)|(x64)|(X64)|(amd64)|(AMD64)|(i686)")
  SET(TARGET_ARCH x64)
ENDIF()

# inc opencv.
FIND_PACKAGE(OpenCV 4 REQUIRED)
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})

# inc mnn
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/mnn/include)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-narrowing -Wno-format-security -Wno-multichar -Wno-deprecated-declarations")

AUX_SOURCE_DIRECTORY(src/ SRCS)
ADD_EXECUTABLE(${PROJECT_NAME}
  ${SRCS}
)

# link opencv
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${OpenCV_LIBRARIES})
# link mnn
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CMAKE_SOURCE_DIR}/mnn/lib/${CMAKE_SYSTEM_NAME}/${TARGET_ARCH}/libMNN.a -pthread)

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/../bin)